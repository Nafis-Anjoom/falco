package protocol_v1

import (
	"testing"
	"time"
)

func TestBinaryEncoding(t *testing.T) {
	messageIn := MessageReceieve{
		Id:          1,
		SenderId:    2,
		RecipientId: 3,
		Timestamp:   time.Unix(12345678, 0),
		Content:     "hello",
	}

	result, _ := messageIn.MarshalBinary()
	expected := []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x61, 0x4E,
		0x68, 0x65, 0x6C, 0x6C, 0x6F,
	}

    testMessageReceivePayload(result, expected, t)
}

func TestBinaryDecode(t *testing.T) {
	input := []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x61, 0x4E,
		0x68, 0x65, 0x6C, 0x6C, 0x6F,
	}

    var result MessageReceieve 
    err := result.UnmarshalBinary(input)
    if err != nil {
        t.Fatalf("unexpected error during unmarshal: %v", err)
    }

	expected := MessageReceieve{
		Id:          1,
		SenderId:    2,
		RecipientId: 3,
		Timestamp:   time.Unix(12345678, 0),
		Content:     "hello",
	}

    if result != expected {
        t.Fatalf("Expected: %+v. Result: %+v", expected, result)
    }
}
